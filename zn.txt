1.	什么是IoC？为何要在程序开发中使用控制反转？如何使用Spring IoC？
	IOC，即控制反转（Inversion of Control，英文缩写为IoC），是一个重要的面向对象编程的法则来削减计算机程序的耦合问题，也是轻量级的Spring框架的核心。 控制反转一般分为两种类型，依赖注入（Dependency Injection，简称DI）和依赖查找（Dependency Lookup）。
	依赖注入，类与类之间或接口之间的依赖关系并不是在编译时就明确建立的,而是通过某些手段,在运行时建立的. 相对而言控制反转是一种编程思想而依赖注入则是它的实现方法
依赖注入又可分为3种方式:
	接口注入（setter）设值注入构造器注入.
IOC的优点:
实现组件之间的解耦，提高程序的灵活性和可维护性。
Spring中IOC就是由Sping来负责控制对象的生命周期和对象间的关系
在编译时对象间的耦合关系往是未知的：
传统开发中：对象之间相互依赖
IOC开发中：IOC容器安排对象之间的依赖
IOC的缺点:
1、创建对象的步骤变复杂了，不直观，当然这是对不习惯这种方式的人来说的。
2、因为使用反射来创建对象，所以在效率上会有些损耗。但相对于程序的灵活性和可维护性来说，这点损耗是微不足道的。
3、缺少IDE重构的支持，如果修改了类名，还需到XML文件中手动修改，这似乎是所有XML方式的缺憾所在。

IOC的应用：
IOC模式将耦合代码从程序中移出，放到统一的XML文件中管理。由IOC容器通过配置文件来管理对象的生命周期、依赖关系等，这样就不用重新修改并编译具体的代码，从而实现组件之间的解耦。

2.	什么是面向切面编程？如何使用Spring AOP？
在运行时，动态地将代码切入到类的指定方法、指定位置上的编程思想就是面向切面的编程
面向切面编程（AOP是Aspect Oriented Program的首字母缩写） ，我们知道，面向对象的特点是继承、多态和封装。而封装就要求将功能分散到不同的对象中去，这在软件设计中往往称为职责分配。实际上也就是说，让不同的类设计不同的方法。这样代码就分散到一个个的类中去了。这样做的好处是降低了代码的复杂程度，使类可重用。
但是人们也发现，在分散代码的同时，也增加了代码的重复性。什么意思呢？比如说，我们在两个类中，可能都需要在每个方法中做日志。按面向对象的设计方法，我们就必须在两个类的方法中都加入日志的内容。也许他们是完全相同的，但就是因为面向对象的设计让类与类之间无法联系，而不能将这些重复的代码统一起来。
也许有人会说，那好办啊，我们可以将这段代码写在一个独立的类独立的方法里，然后再在这两个类中调用。但是，这样一来，这两个类跟我们上面提到的独立的类就有耦合了，它的改变会影响这两个类。那么，有没有什么办法，能让我们在需要的时候，随意地加入代码呢？这种在运行时，动态地将代码切入到类的指定方法、指定位置上的编程思想就是面向切面的编程。 
一般而言，我们管切入到指定类指定方法的代码片段称为切面，而切入到哪些类、哪些方法则叫切入点。有了AOP，我们就可以把几个类共有的代码，抽取到一个切片中，等到需要时再切入对象中去，从而改变其原有的行为。
从技术上来说，AOP基本上是通过代理机制实现的。
-----------------------------------------------------
什么是AOP？
1.AOP概念介绍
　　所谓AOP，即Aspect orientied program,就是面向方面(切面)的编程。
　　　功能：让关注点代码与业务代码分离！
关注点:
         　重复代码就叫做关注点；
业务代码：
　　　　核心业务的代码
业务代码与关注点代码分离，好处？
            　　 -->关注点代码写一次即可；
                   -->开发者只需要关注核心业务；
                   -->运行时期，执行核心业务代码时候动态植入关注点代码；【代理】
如何分离？
         过程式/对象式/代理模式分离
　　AOP的好处是可以动态地添加和删除在切面上的逻辑而不影响原来的执行代码
切面，
          关注点形成的类，就叫切面(类)！
          面向切面编程，就是指对很多功能都有的重复的代码抽取，再在运行的时候往业务方法上动态植入“切面类代码”。
切入点(拦截的作用)
         执行目标对象方法，动态植入切面代码。
         可以通过切入点表达式，指定拦截哪些类的哪些方法；给指定的类在运行的时候植入切面类代码。
注解方式实现AOP编程
步骤：
1）先引入aop相关jar文件           （aspectj  aop优秀组件）                                      
         spring-aop-3.2.5.RELEASE.jar   【spring3.2源码】
　　　 aopalliance.jar                         【spring2.5源码/lib/aopalliance】
　　    aspectjweaver.jar                    【spring2.5源码/lib/aspectj】或【aspectj-1.8.2\lib】
　　　 aspectjrt.jar                            【spring2.5源码/lib/aspectj】或【aspectj-1.8.2\lib】
注意：用到spring2.5版本的jar文件，如果用jdk1.7可能会有问题。
                   需要升级aspectj组件，即使用aspectj-1.8.2版本中提供jar文件提供。
 
2） bean.xml中引入aop名称空间
3）开启aop注解
4) 使用注解
@Aspect                                                              指定一个类为切面类             
@Pointcut("execution(* cn.itcast.e_aop_anno.*.*(..))")  指定切入点表达式
@Before("pointCut_()")                                  　　前置通知: 目标方法之前执行
@After("pointCut_()")                                         后置通知：目标方法之后执行（始终执行）
@AfterReturning("pointCut_()")                       　返回后通知：执行方法结束前执行(异常不执行)
@AfterThrowing("pointCut_()")                            异常通知:  出现异常时候执行
@Around("pointCut_()")                                      环绕通知：环绕目标方法执行
代码示例：
1、bean.xml中引入aop名称空间
2、 开启aop注解
 
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:p="http://www.springframework.org/schema/p"
xmlns:context="http://www.springframework.org/schema/context"
xmlns:aop="http://www.springframework.org/schema/aop"
xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
http://www.springframework.org/schema/aop
      http://www.springframework.org/schema/aop/spring-aop.xsd">

<!-- 使用注解时要开启注解扫描 要扫描的包 -->
<context:component-scanbase-package="cn.itcast.e_aop_anno"></context:component-scan>

<!-- 开启aop注解方式 -->
<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
</beans>
 
3、指定切面类
 
@Component  //加入IOC容器
@Aspect  // 指定当前类为切面类
publicclassAop {

// 指定切入点表达式： 拦截哪些方法； 即为哪些类生成代理对象
　　//解释@Pointcut("execution(* cn.itcast.e_aop_anno.*.*(..))")
　　//@Pointcut("execution(*    切入点表达式固定写法, cn.itcast.e_aop_anno表示包.类名(可以用*表示包下所有的类).方法名(可以用*表示类下所有的方法)(..)表示参数可以用..
    @Pointcut("execution(* cn.itcast.e_aop_anno.*.*(..))")
publicvoidpointCut_(){
    }

　　//@Before("execution(* cn.itcast.e_aop_anno.*.*(..))")每个方法需要写相同的引用，所以将相同的部分抽取到一个空的方法中pointCut_(),
// 前置通知 : 在执行目标方法之前执行
    @Before("pointCut_()")
publicvoidbegin(){
System.out.println("开始事务/异常");
    }

// 后置/最终通知：在执行目标方法之后执行  【无论是否出现异常最终都会执行】
    @After("pointCut_()")
publicvoidafter(){
System.out.println("提交事务/关闭");
    }

// 返回后通知： 在调用目标方法结束后执行 【出现异常不执行】
    @AfterReturning("pointCut_()")
publicvoidafterReturning() {
System.out.println("afterReturning()");
    }

// 异常通知： 当目标方法执行异常时候执行此关注点代码
    @AfterThrowing("pointCut_()")
publicvoidafterThrowing(){
System.out.println("afterThrowing()");
    }

// 环绕通知：环绕目标方式执行
    @Around("pointCut_()")
publicvoidaround(ProceedingJoinPointpjp) throws Throwable{
System.out.println("环绕前....");
pjp.proceed();  // 执行目标方法
System.out.println("环绕后....");
    }

}
 
接口
// 接口
publicinterfaceIUserDao {
voidsave();
}
4、目标对象类一：实现接口
 
/**
 * 目标对象
 */
@Component   // 加入容器
publicclassUserDaoimplementsIUserDao{

    @Override
publicvoidsave() {
System.out.println("-----核心业务：保存！！！------"); 
    }
}
 
目标对象类二：没有实现接口
 
/**
 * 目标对象*/
@Component   // 加入容器
@Scope("prototype")
publicclassOrderDao{

publicvoidsave() {
System.out.println("-----核心业务：保存！！！------");
    }
}
 
测试类
 
publicclass App {

ApplicationContext ac = 
newClassPathXmlApplicationContext("cn/itcast/e_aop_anno/bean.xml");

// 目标对象有实现接口，spring会自动选择“JDK代理”
    @Test
publicvoidtestApp() {
IUserDaouserDao = (IUserDao) ac.getBean("userDao");
System.out.println(userDao.getClass());//$Proxy001  
userDao.save();
    }

// 目标对象没有实现接口， spring会用“cglib代理”
    @Test
publicvoidtestCglib() {
OrderDaoorderDao = (OrderDao) ac.getBean("orderDao");
System.out.println(orderDao.getClass());
orderDao.save();
    }
 
。

.

